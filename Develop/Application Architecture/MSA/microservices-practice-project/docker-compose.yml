version: '3.8'

services:
  # MongoDB - 사용자 서비스용
  mongodb-user:
    image: mongo:7.0
    container_name: mongodb-user
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: user-service
    ports:
      - "27017:27017"
    volumes:
      - mongodb_user_data:/data/db
      - ./scripts/mongo-init-user.js:/docker-entrypoint-initdb.d/mongo-init-user.js:ro
    networks:
      - microservices-network

  # MongoDB - 주문 서비스용
  mongodb-order:
    image: mongo:7.0
    container_name: mongodb-order
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: order-service
    ports:
      - "27018:27017"
    volumes:
      - mongodb_order_data:/data/db
      - ./scripts/mongo-init-order.js:/docker-entrypoint-initdb.d/mongo-init-order.js:ro
    networks:
      - microservices-network

  # MongoDB - 결제 서비스용
  mongodb-payment:
    image: mongo:7.0
    container_name: mongodb-payment
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: payment-service
    ports:
      - "27019:27017"
    volumes:
      - mongodb_payment_data:/data/db
      - ./scripts/mongo-init-payment.js:/docker-entrypoint-initdb.d/mongo-init-payment.js:ro
    networks:
      - microservices-network

  # Redis - 메시지 큐 및 캐싱
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:3003
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - user-service
      - order-service
      - payment-service
    networks:
      - microservices-network
    volumes:
      - ./api-gateway/logs:/app/logs

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "50051:50051"  # gRPC port
    environment:
      - NODE_ENV=production
      - PORT=3001
      - GRPC_PORT=50051
      - MONGODB_URI=mongodb://admin:password123@mongodb-user:27017/user-service?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb-user
      - redis
    networks:
      - microservices-network
    volumes:
      - ./user-service/logs:/app/logs

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    restart: unless-stopped
    ports:
      - "3002:3002"
      - "50052:50052"  # gRPC port
    environment:
      - NODE_ENV=production
      - PORT=3002
      - GRPC_PORT=50052
      - MONGODB_URI=mongodb://admin:password123@mongodb-order:27017/order-service?authSource=admin
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - PAYMENT_SERVICE_URL=http://payment-service:3003
    depends_on:
      - mongodb-order
      - redis
      - user-service
    networks:
      - microservices-network
    volumes:
      - ./order-service/logs:/app/logs

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    restart: unless-stopped
    ports:
      - "3003:3003"
      - "50053:50053"  # gRPC port
    environment:
      - NODE_ENV=production
      - PORT=3003
      - GRPC_PORT=50053
      - MONGODB_URI=mongodb://admin:password123@mongodb-payment:27017/payment-service?authSource=admin
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
    depends_on:
      - mongodb-payment
      - redis
      - user-service
      - order-service
    networks:
      - microservices-network
    volumes:
      - ./payment-service/logs:/app/logs

  # Nginx - 로드밸런서 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    networks:
      - microservices-network

  # Prometheus - 모니터링 (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network

  # Grafana - 대시보드 (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - microservices-network

volumes:
  mongodb_user_data:
  mongodb_order_data:
  mongodb_payment_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
